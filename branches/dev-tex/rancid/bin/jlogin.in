#! @EXPECT_PATH@ --
##
## $Id$
##
## Copyright (C) 1997-2006 by Terrapin Communications, Inc.
## All rights reserved.
##
## This software may be freely copied, modified and redistributed
## without fee for non-commerical purposes provided that this license
## remains intact and unmodified with any RANCID distribution.
##
## There is no warranty or other guarantee of fitness of this software.
## It is provided solely "as is".  The author(s) disclaim(s) all
## responsibility and liability with respect to this software's usage
## or its effect upon hardware, computer systems, other software, or
## anything else.
##
## Except where noted otherwise, rancid was written by and is maintained by
## Henry Kilmer, John Heasley, Andrew Partan, Pete Whiting, and Austin Schutz.
##
#
# The login expect scripts were based on Erik Sherk's gwtn, by permission.
#
# jlogin - juniper login
#
# Most options are intuitive for logging into a Cisco router.
# The default username password is the same as the vty password.
#

# jlogin ignores enable settings.
# jlogin doesn't currently recognize the -v vty password flag, but it
# doesn't appear that setting it would have any undesired effect. Should
# test that though.
@INCLUDE login.top@
# Longer default timeout. If not specified on cli use default.
# This will fail if the cli timeout specified is explicitly set to 45 but
# that's fairly unlikely, I would think.
if { $timeout == 45 } {
   set timeout 120
}

# Log into the router.
# returns: 0 on success, 1 on failure
proc login { router user passwd cmethod cyphertype identfile} {
    global spawn_id in_proc do_command do_script passphrase prompt
    global sshcmd
    set in_proc 1

    # try each of the connection methods in $cmethod until one is successful
    set progs [llength $cmethod]
    foreach prog [lrange $cmethod 0 end] {
	incr progs -1
	if [string match "telnet*" $prog] {
	    regexp {telnet(:([^[:space:]]+))*} $prog command suffix port
	    if {"$port" == ""} {
		set retval [ catch {spawn telnet $router} reason ]
	    } else {
		set retval [ catch {spawn telnet $router $port} reason ]
	    }
	    if { $retval } {
		send_user "\nError: telnet failed: $reason\n"
		return 1
	    }
	} elseif ![string compare $prog "ssh"] {
	    # ssh to the router & try to login with or without an identfile.
	    # We use two calls to spawn since spawn does not seem to parse
	    # spaces correctly.
	    if {$identfile != ""} {
		if [ catch {spawn $sshcmd -c $cyphertype -x -l $user -i $identfile $router} reason ] {
		    send_user "\nError: failed to $sshcmd: $reason\n"
		    return 1
		}
	    } else {
		if [ catch {spawn $sshcmd -c $cyphertype -x -l $user $router} reason ] {
		    send_user "\nError: failed to $sshcmd: $reason\n"
		    return 1
		}
	    }
	} elseif ![string compare $prog "rsh"] {
	    send_error "\nError: unsupported method: rsh\n"
	    if { $progs == 0 } {
		return 1
	    }
	    continue
	} else {
	    send_user "\nError: unknown connection method: $prog\n"
	    return 1
	}
	sleep 0.3

	# This helps cleanup each expect clause.
	expect_after {
	    timeout {
		send_user "\nError: TIMEOUT reached\n"
		catch {close}; wait
		if { $in_proc} {
	            return 1
		} else {
	            continue
		}
            } eof {
		send_user "\nError: EOF received\n"
		catch {close}; wait
		if { $in_proc} {
	            return 1
		} else {
	            continue
		}
            }
	}

	# Here we get a little tricky.  There are several possibilities:
	# the router can ask for a username and passwd and then
	# talk to the TACACS server to authenticate you, or if the
	# TACACS server is not working, then it will use the enable
	# passwd.  Or, the router might not have TACACS turned on,
	# then it will just send the passwd.
	expect {
	    -re "(Connection refused|Secure connection \[^\n\r]+ refused|Connection closed by)" {
		catch {close}; wait
		if !$progs {
		   send_user "\nError: Connection Refused ($prog)\n"; return 1
		}
	    }
            eof { send_user "\nError: Couldn't login\n"; wait; return 1
	    } -nocase "unknown host\r\n" {
		catch {close};
		send_user "\nError: Unknown host\n"; wait; return 1
	    } "Host is unreachable" {
		catch {close};
		send_user "\nError: Host Unreachable!\n"; wait; return 1
	    } "No address associated with name" {
		catch {close};
		send_user "\nError: Unknown host\n"; wait; return 1
	    }
	    "Login incorrect" {
			  send_user "\nError: Check your password for $router\n"
			  catch {close}; wait; return 1
			}
	    -re "Enter passphrase.*: " {
		# sleep briefly to allow time for stty -echo
		sleep 1
		send "$passphrase\r"
		exp_continue }
	    -re "(Host key not found |The authenticity of host .* be established).*\(yes\/no\)\?" {
		send "yes\r"
		send_user "\nHost $router added to the list of known hosts.\n"
		exp_continue }
	    -re "HOST IDENTIFICATION HAS CHANGED.* \(yes\/no\)\?"	{
		send "no\r"
		send_user "\nError: The host key for $router has changed.  Update the SSH known_hosts file accordingly.\n"
		return 1 }
	    -re "Offending key for .* \(yes\/no\)\?"   {
		send "no\r"
		send_user "\nError: host key mismatch for $router.  Update the SSH known_hosts file accordingly.\n"
		return 1 }
	    -re "(Username|\[\r\n]login):"	{
						  send "$user\r"
						  exp_continue
	    					}
	    "\[Pp]assword:"			{
						  sleep 1; send "$passwd\r"
						  exp_continue
						}
	    -re "$prompt"		{ break; }
	    denied	{ send_user "\nError: Check your password for $router\n"
	                  catch {close}; wait; return 1
	                }
	}
    }

    # we are logged in, now figure out the full prompt
    send "\r"
    expect {
	-re "(\r\n|\n)"		{ exp_continue; }
	-re "^\[^ ]+$prompt"	{ set prompt $expect_out(0,string);
				  regsub ">" $prompt "\[#>]" prompt;
				}
    }

    set in_proc 0
    return 0
}

# Run commands given on the command line.
proc run_commands { prompt command } {
    global in_proc
    set in_proc 1

    send "set cli complete-on-space off\r"
    expect -re $prompt	{}
    send "set cli screen-length 0\r"
    expect -re $prompt	{}

    # Is this a multi-command?
    if [ string match "*\;*" "$command" ] {
	set commands [split $command \;]
	set num_commands [llength $commands]

	for {set i 0} {$i < $num_commands} { incr i} {
	    send "[lindex $commands $i]\r"
	    expect {
		-re "^\[^\n\r *]*$prompt $"	{}
		-re "^\[^\n\r]*$prompt."	{ exp_continue }
		-re "(\r\n|\n)"			{ exp_continue }
            }
	}
    } else {
	send "$command\r"
	expect {
		-re "^\[^\n\r *]*$prompt $"	{}
		-re "^\[^\n\r]*$prompt."	{ exp_continue }
		-re "(\r\n|\n)"			{ exp_continue }
	}
    }
    send "quit\r"
    expect {
	"\n" { exp_continue }
	timeout { return 0 }
	eof { return 0 }
    }
    set in_proc 0
}

#
# For each router... (this is main loop)
#
source_password_file $password_file
set in_proc 0
foreach router [lrange $argv $i end] {
    set router [string tolower $router]
    send_user "$router\n"

    set prompt ">"

    # Figure out username
    if {[info exists username]} {
      # command line username
      set loginname $username
    } else {
      set loginname [join [find user $router] ""]
      if { "$loginname" == "" } { set loginname $default_user }
    }

    # Figure out loginname's password (if different from the vty password)
    if {[info exists userpasswd]} {
      # command line passwd
      set passwd $userpasswd
    } else {
      set passwd [join [lindex [find userpassword $router] 0] ""]
      if { "$passwd" == "" } {
        set passwd [join [lindex [find password $router] 0] ""]
        if { "$passwd" == "" } {
	  send_user "\nError: no password for $router in $password_file.\n"
	  continue
        }
      }
    }

    # Figure out identity file to use
    set identfile [join [lindex [find identity $router] 0] ""]

    # Figure out passphrase to use
    if {[info exists avpassphrase]} {
	set passphrase $avpassphrase
    } else {
	set passphrase [join [lindex [find passphrase $router] 0] ""]
    }
    if { ! [string length "$passphrase"]} {
	set passphrase $passwd
    }

    # Figure out ssh cypher type
    if {[info exists cypher]} {
      # command line ssh cypher type
      set cyphertype $cypher
    } else {
      set cyphertype [find cyphertype $router]
      if { "$cyphertype" == "" } { set cyphertype "3des" }
    }

    # Figure out connection method
    set cmethod [find method $router]
    if { "$cmethod" == "" } { set cmethod {{telnet} {ssh}} }

    # Figure out the SSH executable name
    set sshcmd [find sshcmd $router]
    if { "$sshcmd" == "" } { set sshcmd {ssh} }

    # Login to the router
    if {[login $router $loginname $passwd $cmethod $cyphertype $identfile]} {
	continue
    }

    if { $do_command } {
	if {[run_commands $prompt $command]} {
	    continue
	}
    } elseif { $do_script } {
	send "set cli complete-on-space off\r"
	expect -re $prompt	{}
	send "set cli screen-length 0\r"
	expect -re $prompt	{}
	source $sfile
	close
    } else {
	label $router
	log_user 1
	interact
    }

    # End of for each router
    wait
    sleep 0.3
}
exit 0
