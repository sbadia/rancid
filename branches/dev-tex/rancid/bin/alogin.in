#! @EXPECT_PATH@ --
#
## $Id$
##
## Copyright (C) 1997-2004 by Terrapin Communications, Inc.
## All rights reserved.
##
## This software may be freely copied, modified and redistributed
## without fee for non-commerical purposes provided that this license
## remains intact and unmodified with any RANCID distribution.
##
## There is no warranty or other guarantee of fitness of this software.
## It is provided solely "as is".  The author(s) disclaim(s) all
## responsibility and liability with respect to this software's usage
## or its effect upon hardware, computer systems, other software, or
## anything else.
##
## Except where noted otherwise, rancid was written by and is maintained by
## Henry Kilmer, John Heasley, Andrew Partan, Pete Whiting, and Austin Schutz.
##
#
# The login expect scripts were based on Erik Sherk's gwtn, by permission.
#
# alogin - Alteon WebOS switch login
#
# afort@choqolat.org is responsible for this particular mess
# (andrew fort) 
#

# alogin: doesn't understand enable. It will just ignore the enable options.
@INCLUDE login.top@

# Log into the router.
proc login { router user userpswd passwd prompt cmethod cyphertype } {
    global spawn_id in_proc do_command do_script
    global u_prompt p_prompt sshcmd
    set in_proc 1
    set uprompt_seen 0

    # try each of the connection methods in $cmethod until one is successful
    set progs [llength $cmethod]
    foreach prog [lrange $cmethod 0 end] {
	if [string match "telnet*" $prog] {
	    regexp {telnet(:([^[:space:]]+))*} $prog command suffix port
	    if {"$port" == ""} {
		set retval [ catch {spawn telnet $router} reason ]
	    } else {
		set retval [ catch {spawn telnet $router $port} reason ]
	    }
	    if { $retval } {
		send_user "\nError: telnet failed: $reason\n"
		exit 1
	    }
        } elseif ![string compare $prog "ssh"] {
            if [ catch {spawn $sshcmd -c $cyphertype -x -l $user $router} reason ] {
                send_user "\nError: $sshcmd failed: $reason\n"
                exit 1
            }
        } elseif ![string compare $prog "rsh"] {
            if [ catch {spawn rsh -l $user $router} reason ] {
                send_user "\nError: rsh failed: $reason\n"
                exit 1
            }
        } else {
            puts "\nError: unknown connection method: $prog"
            return 1
        }
        incr progs -1
        sleep 0.3

    # This helps cleanup each expect clause.
    expect_after {
	timeout {
	    send_user "\nError: TIMEOUT reached\n"
	    catch {close}; wait
	    if { $in_proc} {
		return 1
	    } else {
		continue
	    }
	} eof {
	    send_user "\nError: EOF received\n"
	    catch {close}; wait
	    if { $in_proc} {
		return 1
	    } else {
		continue
	    }
	}
    }

    expect {
	"Connection refused" {
	    close; wait
	    sleep 0.3
		expect eof
		send_user "\nError: Connection Refused\n"; wait; return 1
	} eof { send_user "\nError: Couldn't login\n"; wait; return 1
	} "Unknown host\r\n" {
	    expect eof
	    send_user "\nError: Unknown host\n"; wait; return 1
	} "Host is unreachable" {
	    expect eof
	    send_user "\nError: Host Unreachable!\n"; wait; return 1
	} "No address associated with name" {
	    expect eof
	    send_user "\nError: Unknown host\n"; wait; return 1
	}
	-re "(Host key not found |The authenticity of host .* be established).*\(yes\/no\)\?" {
	    send "yes\r"
	    send_user "\nHost $router added to the list of known hosts.\n"
	    exp_continue }
	-re "HOST IDENTIFICATION HAS CHANGED.* \(yes\/no\)\?"   {
	    send "no\r"
	    send_user "\nError: The host key for $router has changed.  Update the SSH known_hosts file accordingly.\n"
	    return 1 }
	-re "Offending key for .* \(yes\/no\)\?"   {
	    send "no\r"
	    send_user "\nError: host key mismatch for $router.  Update the SSH known_hosts file accordingly.\n"
	    return 1 }

	-re "$u_prompt"			{
					  send "$user\r"
					  set uprompt_seen 1
					  exp_continue
					}
	-re "$p_prompt"			{
					  sleep 1
					  if {$uprompt_seen == 1} {
						send "$userpswd\r"
					  } else {
						send "$passwd\r"
					  }
					  exp_continue
					}
	-re "^Confirm seeing above note" {
					  send "y\r"
					  exp_continue
					}
	"Password incorrect"	{ send_user "\nError: Check your password for $router\n";
				  catch {close}; wait; return 1 }
	-re "$prompt"	{ break; }
	denied		{ send_user "\nError: Check your passwd for $router\n"
			  catch {close}; wait; return 1
			}
	"\r\n"		{ exp_continue; }
    }
  }
    set in_proc 0
    return 0
}

# Run commands given on the command line.
proc run_commands { prompt command } {
    global in_proc
    set in_proc 1

    send "lines 0\r"
    expect -re $prompt {}

    regsub -all "\[)(]" $prompt {\\&} reprompt

    # Is this a multi-command?
    if [ string match "*\;*" "$command" ] {
	set commands [split $command \;]
	set num_commands [llength $commands]
	for {set i 0} {$i < $num_commands} { incr i} {
	    send "[subst -nocommands [lindex $commands $i]]\r"
	    expect {
		-re "^\[^\n\r]*$reprompt"	{}
		-re "^\[^\n\r ]*>>.*$reprompt"	{ exp_continue }
		-re "\[\n\r]+"			{ exp_continue }
	    }
	}
    } else {
	send "[subst -nocommands $command]\r"
	expect {
		-re "^\[^\n\r]*$reprompt"	{}
		-re "^\[^\n\r ]*>>.*$reprompt"	{ exp_continue }
		-re "\[\n\r]+"			{ exp_continue }
	}
    }
    send "exit\r"
    expect {
	-re "^WARNING: There are unsaved configuration changes."
 	{
		send "y\r"
		exp_continue
	}
	"\n" { exp_continue }
	"\[^\n\r *]*Session terminated" { return 0 }
	timeout { return 0 }
	eof { return 0 }
    }
    set in_proc 0
}

#
# For each router... (this is main loop)
#
source_password_file $password_file
set in_proc 0
foreach router [lrange $argv $i end] {
    set router [string tolower $router]
    send_user "$router\n"

    # Figure out prompt.
    set prompt ">> \[^\r\n]*\[#|>] "
    # alteon only "enables" based on the password used at login time
    set autoenable 1
    set enable 0

    # Figure out passwords
    if { $do_passwd } {
      set pswd [find password $router]
      if { [llength $pswd] == 0 } {
	send_user "\nError - no password for $router in $password_file.\n"
	continue
      }
      set passwd [join [lindex $pswd 0] ""]
    }

    # Figure out username
    if {[info exists username]} {
      # command line username
      set ruser $username
    } else {
      set ruser [join [find user $router] ""]
      if { "$ruser" == "" } { set ruser $default_user }
    }

    # Figure out username's password (if different from the vty password)
    if {[info exists userpasswd]} {
      # command line username
      set userpswd $userpasswd
    } else {
      set userpswd [join [find userpassword $router] ""]
      if { "$userpswd" == "" } { set userpswd $passwd }
    }

    # Figure out prompts
    set u_prompt [find userprompt $router]
    if { "$u_prompt" == "" } {
	set u_prompt "(Username|login|  Login):"
    } else {
	set u_prompt [join [lindex $u_prompt 0] ""]
    }
    set p_prompt [find passprompt $router]
    if { "$p_prompt" == "" } {
	set p_prompt "\[Pp]assword:"
    } else {
	set p_prompt [join [lindex $p_prompt 0] ""]
    }

    # Figure out cypher type
    if {[info exists cypher]} {
      # command line cypher type
      set cyphertype $cypher
    } else {
      set cyphertype [find cyphertype $router]
      if { "$cyphertype" == "" } { set cyphertype "3des" }
    }

    # Figure out connection method
    set cmethod [find method $router]
    if { "$cmethod" == "" } { set cmethod {{telnet} {ssh}} }

    # Figure out the SSH executable name
    set sshcmd [find sshcmd $router]
    if { "$sshcmd" == "" } { set sshcmd {ssh} }

    # Login to the router
    if {[login $router $ruser $userpswd $passwd $prompt $cmethod $cyphertype]} {
	continue
    }

    if { $do_command } {
	if {[run_commands $prompt $command]} {
	    continue
	}
    } elseif { $do_script } {
	send "lines 0\r"
	expect -re $prompt	{}
	source $sfile
	close
    } else {
	label $router
	log_user 1
	interact
    }

    # End of for each router
    wait
    sleep 0.3
}
exit 0
