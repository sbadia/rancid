#! @EXPECT_PATH@ --
##
## $Id$
##
## Copyright (C) 1997-2004 by Terrapin Communications, Inc.
## All rights reserved.
##
## This software may be freely copied, modified and redistributed
## without fee for non-commerical purposes provided that this license
## remains intact and unmodified with any RANCID distribution.
##
## There is no warranty or other guarantee of fitness of this software.
## It is provided solely "as is".  The author(s) disclaim(s) all
## responsibility and liability with respect to this software's usage
## or its effect upon hardware, computer systems, other software, or
## anything else.
##
## Except where noted otherwise, rancid was written by and is maintained by
## Henry Kilmer, John Heasley, Andrew Partan, Pete Whiting, and Austin Schutz.
##
#
# The login expect scripts were based on Erik Sherk's gwtn, by permission.
# Netscreen hacks implemented by Stephen Gill <gillsr@yahoo.com>.
#
# nlogin - netscreen login
#
# Most options are intuitive for logging into a netscreen firewall.
#
# Misc notes
#	netscreen does not have the concept of "enable", once logged in, a
#	users permissions can not change.


@INCLUDE login.top@
# Enable password isn't understood but is used in script.
# enable settings mostly ignored, but set this:
set do_enapasswd 0
# just in case

# Log into the firewall.
proc login { firewall user userpswd passwd enapasswd prompt cmethod
cyphertype } {
    global spawn_id in_proc do_command do_script sshcmd
    set in_proc 1
    set uprompt_seen 0

    # Telnet to the firewall & try to login.
    set progs [llength $cmethod]
    foreach prog [lrange $cmethod 0 end] {
	if [string match "telnet*" $prog] {
	    regexp {telnet(:([^[:space:]]+))*} $prog command suffix port
	    if {"$port" == ""} {
		set retval [ catch {spawn telnet $firewall} reason ]
	    } else {
		set retval [ catch {spawn telnet $firewall $port} reason ]
	    }
	    if { $retval } {
		send_user "\nError: telnet failed: $reason\n"
		exit 1
	    }
	} elseif ![string compare $prog "ssh"] {
	    if [ catch {spawn $sshcmd -c $cyphertype -x -l $user $firewall} reason ] {
		send_user "\nError: $sshcmd failed: $reason\n"
		exit 1 
	    }  
	} elseif ![string compare $prog "rsh"] {
	    if [ catch {spawn rsh -l $user $firewall} reason ] {
		send_user "\nError: rsh failed: $reason\n"
		exit 1
	    }
	} else {
	    puts "\nError: unknown connection method: $prog"
	    return 1
	}
	incr progs -1

    sleep 0.3

    # This helps cleanup each expect clause.
    expect_after {
	timeout {
	    send_user "\nError: TIMEOUT reached\n"
	    catch {close}; wait
	    if { $in_proc} {
	        return 1
	    } else {
	        continue
	    }
        } eof {
	    send_user "\nError: EOF received\n"
	    catch {close}; wait
	    if { $in_proc} {
	        return 1
	    } else {
	        continue
	    }
        }
    }

    # Here we get a little tricky.  There are several possibilities:
    # the firewall can ask for a username and passwd and then
    # talk to the TACACS server to authenticate you, or if the
    # TACACS server is not working, then it will use the enable
    # passwd.  Or, the firewall might not have TACACS turned on,
    # then it will just send the passwd.
    # if telnet fails with connection refused, try ssh
    expect {
	"Connection refused" { 
	    send_user "\nError: Connection Refused\n"; wait; return 1
        } eof { send_user "\nError: Couldn't login\n"; wait; return 1
	} "Unknown host\r\n" { 
	    expect eof
	    send_user "\nError: Unknown host\n"; wait; return 1
	} "Host is unreachable" {
	    expect eof
	    send_user "\nError: Host Unreachable!\n"; wait; return 1
	} "No address associated with name" {
	    expect eof
	    send_user "\nError: Unknown host\n"; wait; return 1
	}
	-re "Are you sure you want to continue connecting .*" {
	    send "yes\r"
	    send_user "Host $firewall added to the list of known hosts.\n"
            exp_continue }
	-re "Host key not found .* \(yes\/no\)\?"       {
            send "yes\r"
            send_user "Host $firewall added to the list of known hosts.\n"
            exp_continue }
        -re "HOST IDENTIFICATION HAS CHANGED.* \(yes\/no\)\?"   {
            send "no\r"
            send_user "\nError: The host key for $firewall has changed.  Update the SSH known_hosts file accordingly.\n"
            return 1 }
	-re "Offending key for .* \(yes\/no\)\?"   {
	    send "no\r"
	    send_user "\nError: host key mismatch for $firewall.  Update the SSH known_hosts file accordingly.\n"
	    return 1 }
	denied		{ send_user "\nError: Check your passwd for $firewall\n" 
	                  catch {close}; wait; return 1
	                }
	" ### Login failed" {send_user "\nError: Check your passwd for $firewall\n"; return 1 }
	-re "(login:)"			{
					  sleep 1;
					  send "$user\r"
					  set uprompt_seen 1
					  exp_continue
					}
	"@\[^\r\n]+\[Pp]assword:"	{
					  # ssh pwd prompt
					  sleep 1
					  send "$userpswd\r"
					  exp_continue
					}
	"\[Pp]assword:"			{
					  sleep 1;
					  if {$uprompt_seen == 1} {
						send "$userpswd\r"
					  } else {
						send "$passwd\r"
					  }
					  exp_continue
					}
	-- "$prompt"			{ break; }
     }
    }
    set in_proc 0
    return 0
}

# Run commands given on the command line.
proc run_commands { prompt command } {
    global in_proc
    set in_proc 1

    send "set console page 0\r"
    expect -re $prompt {}

    # Is this a multi-command?
    if [ string match "*\;*" "$command" ] {
	set commands [split $command \;]
	set num_commands [llength $commands]

	for {set i 0} {$i < $num_commands} { incr i} {
	    send "[subst [lindex $commands $i]]\r"
	    expect {
		-re "\[\n\r]+"		{ exp_continue }
                -re "$prompt"		{}
		-gl "--- more ---"	{
					  send " "
					  exp_continue
					}
            }
	}
    } else {
	send "[subst $command]\r"
	expect {
		-re "\[\n\r]+"		{ exp_continue }
                -re "$prompt"		{}
		-gl "--- more ---"	{
					  send " "
					  exp_continue
					}
	}
    }
    send "exit\r"
    expect {
	-re "$prompt"			{
					  send "exit\r"
					  exp_continue
					}
	-re "\[\n\r]+"			{ exp_continue }
	-gl "Configuration modified, save?" {
					  send "n\r"
					  exp_continue
					}
	timeout				{ return 0 }
	eof				{ return 0 }
    }
    set in_proc 0
}

#
# For each firewall... (this is main loop)
#
source_password_file $password_file
set in_proc 0
foreach firewall [lrange $argv $i end] {
    set firewall [string tolower $firewall]
    send_user "$firewall\n"

    set prompt {-> }

    # Figure out passwords
    if { $do_passwd || $do_enapasswd } {
      set pswd [find password $firewall]
      if { [llength $pswd] == 0 } {
        send_user "\nError: no password for $firewall in $password_file.\n"
        continue
      } 
     set passwd [join [lindex $pswd 0] ""]
     set enapasswd [join [lindex $pswd 1]  ""]
    }

    # Figure out username
    if {[info exists username]} {  
      # command line username
      set ruser $username
    } else {
      set ruser [join [find user $firewall] ""]
      if { "$ruser" == "" } { set ruser $default_user }
    } 

    # Figure out username's password (if different from the vty password)
    if {[info exists userpasswd]} {
      # command line username
      set userpswd $userpasswd
    } else {
      set userpswd [join [find userpassword $firewall] ""]
      if { "$userpswd" == "" } { set userpswd $passwd } 
    } 
    

    # Figure out cypher type
    if {[info exists cypher]} {
      # command line cypher type
      set cyphertype $cypher
    } else {
      set cyphertype [find cyphertype $firewall]
      if { "$cyphertype" == "" } { set cyphertype "3des" }
    }

    # Figure out connection method
    set cmethod [find method $firewall]
    if { "$cmethod" == "" } { set cmethod {{telnet} {ssh}} }

    # Figure out the SSH executable name  
    set sshcmd [find sshcmd $firewall]  
    if { "$sshcmd" == "" } { set sshcmd {ssh} }  

    # Login to the firewall
    if {[login $firewall $ruser $userpswd $passwd $enapasswd $prompt $cmethod $cyphertype]} {
	continue
    }

    # we are logged in, now figure out the full prompt
    send "\r"
    expect {
	-re "\[\r\n]+"		{ exp_continue; }
	-re "^(.+$prompt)"	{ set junk $expect_out(0,string);
				  # if it has HA (high avail), the prompt will
				  # be "something-(.)->"
				  regsub -all "\[\]\)\(\[]" $junk {\\&} prompt;
				}
    }

    if { $do_command } {
	if {[run_commands $prompt $command]} {
	    continue
	}
    } elseif { $do_script } {
	send "set console page 0\r"
	expect -re $prompt	{}
	source $sfile
	close
    } else {
	label $firewall 
	log_user 1
	interact
    }

    # End of for each firewall
    wait
    sleep 0.3
}
exit 0
