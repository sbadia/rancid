#!/bin/sh
##
##
## Copyright (C) 1996-2001 by Henry Kilmer.
## All rights reserved.
##
## This software may be freely copied, modified and redistributed without
## fee for non-commerical purposes provided that this copyright notice is
## preserved intact on all copies and modified copies.
##
## There is no warranty or other guarantee of fitness of this software.
## It is provided solely "as is". The author(s) disclaim(s) all
## responsibility and liability with respect to this software's usage
## or its effect upon hardware, computer systems, other software, or
## anything else.
##
##
#
# control_rancid $GROUP
#

# command-line options
# -r <device name>
if [ $# -ge 1 ] ; then

    while [ 1 ] ; do
	case $1 in
	-r)
	    shift
	    # next arg is the device name
	    device="$1"
	    shift
	    ;;
	--)
	    shift; break;
	    ;;
	-*)
	    echo "unknown option: $1" >&2
	    exit 1
	    ;;
	*)
	    break;
	    ;;
	esac
    done
fi

# Number of things par should run in parallel.
PAR_COUNT=${PAR_COUNT:-5}

# Must specify a group on which to run rancid
if [ $# -lt 1 ]; then
    echo 'must specify group'; exit 1
else
    GROUP=$1
fi
DIR=$BASEDIR/$GROUP
TMP=${TMPDIR:=/tmp}/rancid.$GROUP.$$
trap 'rm -fr $TMP;' 1 2 15

# Bail if we do not have the necessary info to run
if [ ! -d $DIR ]
then
    echo "$DIR does not exist."
    echo "Run bin/create_cvs $GROUP to make all of the needed directories."
    (
	echo "To: @MAILPLUS@admin-$GROUP"
	echo "Subject: no $GROUP directory"
	echo "Precedence: bulk"
	echo ""
	echo "$DIR does not exist."
	echo "Run bin/create_cvs $GROUP to make all of the needed directories."
    ) | sendmail -t
    exit 1
fi

# do cvs update of router.db in case anyone has fiddled.
cd $DIR
cvs update router.db > $TMP 2>&1
grep "^C" $TMP > /dev/null
if [ $? -eq 0 ] ; then
    echo "There were CVS conflicts during update."
    echo ""
    cat $TMP
    rm -f $TMP
    exit 1
fi
rm -f $TMP

if [ ! -f $DIR/router.db ]
then
    (
	echo "To: @MAILPLUS@admin-$GROUP"
	echo "Subject: no $GROUP/router.db file"
	echo "Precedence: bulk"
	echo ""
	echo "$DIR/router.db does not exist."
    ) | sendmail -t
    exit 1;
elif [ ! -s $DIR/router.db ]
then
    exit
fi

# generate the list of all, up, & down routers
cd $DIR
trap 'rm -fr routers.db routers.all.new routers.down.new routers.up.new \
	$TMP;' 1 2 15
grep -v '^#' router.db > routers.db
cut -d: -f1,2 routers.db | sort -u > routers.all.new
if [ ! -f routers.all ] ; then touch routers.all; fi
diff routers.all routers.all.new > /dev/null 2>&1; RALL=$?
@PERLV@ -F: -ane '{($F[0] =~ tr@A-Z@a-z@,print join(":", @F)."\n")
    if ($F[2] !~ /^up$/i);}' routers.db | sort -u > routers.down.new
if [ ! -f routers.down ] ; then touch routers.down; fi
diff routers.down routers.down.new > /dev/null 2>&1; RDOWN=$?
@PERLV@ -F: -ane '{($F[0] =~ tr@A-Z@a-z@,print "$F[0]:$F[1]\n")
    if ($F[2] =~ /^up$/i);}' routers.db | sort -u > routers.up.new
if [ ! -f routers.up ] ; then touch routers.up; fi
diff routers.up routers.up.new > /dev/null 2>&1; RUP=$?

if [ $RALL -ne 0 -o $RDOWN -ne 0 -o $RUP -ne 0 ]
then
    (
	if [ $RUP -ne 0 ] ; then
	    if [ $RUP -eq 1 ] ; then
	        echo Routers changed to up:
	        comm -13 routers.up routers.up.new | sed -e 's/^/        /'
	        echo
	    elif [ -s routers.up.new ] ; then
	        echo Routers changed to up:
	        sed -e 's/^/        /' routers.up.new
	        echo
	    fi
	fi
	if [ $RDOWN -ne 0 ] ; then
	    if [ $RDOWN -eq 1 ] ; then
	        echo Routers changed to down:
	        comm -13 routers.down routers.down.new | sed -e 's/^/        /'
	        echo
	    elif [ -s routers.down.new ] ; then
	        echo Routers changed to down:
	        sed -e 's/^/        /' routers.down.new
	        echo
	    fi
	fi
	WC=`wc -l routers.all | sed -e 's/^ *\([^ ]*\) .*$/\1/'`
	WCNEW=`wc -l routers.all.new | sed -e 's/^ *\([^ ]*\) .*$/\1/'`
	if [ $RALL -eq 1 -a $WC -gt $WCNEW ] ; then
	    echo Deleted routers:
	    comm -23 routers.all routers.all.new | sed -e 's/^/        /'
	fi
    ) > routers.mail

    if [ -s routers.mail ] ; then
	(
	  echo "To: @MAILPLUS@admin-$GROUP"
	  echo "Subject: changes in $GROUP routers"
	  echo "Precedence: bulk"
	  echo ""
	  cat routers.mail
	) | sendmail -t
    fi
    rm -f routers.mail

    cd $DIR/configs

    # Add new routers to the CVS structure.
    for router in `comm -13 $DIR/routers.up $DIR/routers.up.new`
    do
	OFS=$IFS
	IFS=:
	set $router
	IFS=$OFS
	router=$1

	touch $router
	cvs add -ko $router
	cvs commit -m 'new router' $router
	echo "Added $router"
    done
    echo
    cd $DIR

fi
mv routers.all.new routers.all
mv routers.down.new routers.down
mv routers.up.new routers.up
rm -f routers.db
trap 'rm -fr $TMP;' 1 2 15

cd $DIR/configs
# check for 'up' routers missing in cvs.  no idea how this happens to some folks
for router in `cut -d: -f1 ../routers.up` ; do
    cvs status $router | grep -i 'status: unknown' > /dev/null 2>&1
    if [ $? -eq 0 ]; then
	touch $router
	cvs add -ko $router
	echo "CVS added missing router $router"
    fi
    echo
done
# cvs delete configs for routers not listed in routers.up.
for router in `find . \( -name \*.new -prune -o -name CVS -prune \) -o -type f -print | sed -e 's/^.\///'` ; do
    grep -i "^$router:" ../router.db > /dev/null 2>&1
    if [ $? -eq 1 ]; then
	rm -f $router
	cvs delete $router
	cvs commit -m 'deleted router' $router
	echo "Deleted $router"
    fi
done
cd $DIR

# no routers, empty list or all 'down'
if [ ! -s routers.up ]
then
    # commit router.db
    cvs commit -m updates router.db > /dev/null
    exit;
fi

# if a device (-r) was specified, see if that device is in this group
if [ "X$device" != "X" ] ; then
    trap 'rm -fr $TMP $DIR/routers.single;' 1 2 15
    devlistfile="$DIR/routers.single"
    grep "^$device:" routers.up > $devlistfile
    if [ $? -eq 1 ] ; then
	exit;
    fi
else
    devlistfile="$DIR/routers.up"
fi

# Now we can actually try to get the configs
cd $DIR/configs

# The number of processes running at any given time can be
# tailored to the specific installation.
echo "Trying to get all of the configs."
par -q -n $PAR_COUNT -c "rancid-fe \{}" $devlistfile

# This section will generate a list of missed routers
# and try to grab them again.  It will run through
# $pass times.
pass=4
round=1
if [ -f $DIR/routers.up.missed ]; then
    rm -f $DIR/routers.up.missed
fi
while [ $round -le $pass ]
do
    for router in `cat $devlistfile`
    do
	OFS=$IFS
	IFS=':'
	set $router
	IFS=$OFS
	router=$1; mfg=$2

	if [ ! -s $router.new ]
	then
	    echo "$router:$mfg" >> $DIR/routers.up.missed
	    rm -f $router.new
	fi
    done

    if [ -f $DIR/routers.up.missed ]; then
	echo "====================================="
	echo "Getting missed routers: round $round."
	par -q -n $PAR_COUNT -c "rancid-fe \{}" $DIR/routers.up.missed
	rm -f $DIR/routers.up.missed
	round=`expr $round + 1`
    else
	echo "All routers sucessfully completed."
	round=`expr $pass + 1`
    fi
done
echo

# Make sure that all of the new configs are not empty.
for config in *.new
do
    if [ ! -s $config ]
    then
	rm -f $config
    fi
done

# Now that we have the new configs, rename them to their proper
# name.
rename 's/.new$//' *.new

# This has been different for different machines...
# Diff the directory and then checkin.
trap 'rm -fr $TMP $TMP.diff $DIR/routers.single;' 1 2 15
cd $DIR
cvs -f @DIFF_CMD@ | sed -e '/^RCS file: /d' -e '/^--- /d' \
	-e '/^+++ /d' -e 's/^\([-+ ]\)/\1 /' >$TMP.diff

cvs commit -m updates

# Mail out the diffs (if there are any).
if [ -s $TMP.diff ]; then
    sendmail -t <<EMAIL
To: @MAILPLUS@$GROUP
Subject: $GROUP router config diffs
Precedence: bulk

`cat $TMP.diff`
EMAIL
fi

# If any machines have not been reached within the last $OLDTIME
# hours, mail out a list of them.
cd $DIR/configs
rm -f $DIR/routers.failed
if [ "X$OLDTIME" = "X" ] ; then
    OLDTIME=24
fi
@PERLV@ -F: -ane "{\$t = (stat(\$F[0]))[9]; print \`ls -ld \$F[0]\`
	if (time() - \$t >= $OLDTIME*60*60);}" $devlistfile | sort -u > $DIR/routers.failed
if [ -s $DIR/routers.failed ]
then
	(
	  echo "To: @MAILPLUS@admin-$GROUP"
	  echo "Subject: config fetcher problems - $GROUP"
	  echo "Precedence: bulk"
	  echo ""
	  echo "The following routers have not been successfully contacted for"
	  echo "more than $OLDTIME hours."

	  cat $DIR/routers.failed
	) | sendmail -t
fi

# Cleanup
rm -f $TMP.diff $DIR/routers.single
trap '' 1 2 15
